syntax= "proto3";

package calcular;
option go_package="./calculator/calculatorpb";


message Sum {
    float first_number = 1;
    float second_number = 2;
}

message SumRequest {
    Sum sum = 1;
}

message SumResponse {
    float sum_result = 1;
}

message Sub {
    float first_number = 1;
    float second_number = 2;
}

message SubRequest {
    Sub sub = 1;
}

message SubResponse {
    float sub_result = 1;
}

message Mul  {
    float first_number = 1;
    float second_number = 2;
}

message MulRequest {
    Mul mul = 1;
}

message MulResponse {
    float mul_result = 1;
}

message Div {
    float first_number = 1;
    float second_number = 2;
}

message DivRequest {
    Div div = 1;
}

message DivResponse {
    double div_result = 1;
}

message PrimeNumberDecompositionRequest {
    int64 number = 1;
}

message PrimeNumberDecompositionResponse {
    int64 prime_factor = 1;
}

message ComputeAverageRequest {
    int32 number = 1;
}

message ComputeAverageResponse {
    double result = 1;
}

message FindMaximumRequest {
    int64 number = 1;
}

message FindMaximumResponse {
    int64 maximum_number = 1;
}

message SquareRootRequest   {
    int64 number = 1;
}

message SquareRootResponse {
    double number_root = 1;
}

service CalculatorService {
    rpc sum(SumRequest) returns (SumResponse) {}
    rpc Sub(SubRequest) returns (SubResponse) {}
    rpc Mul(MulRequest) returns (MulResponse) {}
    rpc Div(DivRequest) returns (DivResponse) {}

    rpc PrimeNumberDecomposition(PrimeNumberDecompositionRequest) returns (stream PrimeNumberDecompositionResponse){}

    rpc ComputeAverage(stream ComputeAverageRequest) returns (ComputeAverageResponse) {}

    rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse) {}

    // error handling 
    // this RPC will throw an exception if the sent number is negative
    // The roor being sent is of type INVALID_ARGUMENT
    rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse) {}
}
